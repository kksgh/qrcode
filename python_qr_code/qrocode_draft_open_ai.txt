import qrcode
from PIL import Image, ImageDraw, ImageOps

def generate_gradient_rounded_qr(data, filename='gradient_rounded_qr.png'):
    # Generate the QR code
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)

    # Create an image from the QR code with a transparent background
    img = qr.make_image(fill_color="black", back_color=None)

    # Add a gradient-colored rounded border
    img_with_border = add_gradient_rounded_border(img, border_size=20, border_color_start=(255, 0, 0), border_color_end=(0, 0, 255))

    # Save the final image
    img_with_border.save(filename)

def add_gradient_rounded_border(image, border_size, border_color_start, border_color_end):
    # Create a mask for the rounded border
    mask = Image.new("L", image.size, 0)
    draw = ImageDraw.Draw(mask)
    draw.rounded_rectangle((0, 0, image.size[0], image.size[1]), radius=20, outline=255, width=border_size)
    
    # Apply the gradient colors to the mask
    gradient = Image.new('RGB', image.size)
    for x in range(image.size[0]):
        for y in range(image.size[1]):
            alpha = mask.getpixel((x, y)) / 255.0
            blended_color = (
                int(border_color_start[0] * alpha + border_color_end[0] * (1 - alpha)),
                int(border_color_start[1] * alpha + border_color_end[1] * (1 - alpha)),
                int(border_color_start[2] * alpha + border_color_end[2] * (1 - alpha))
            )
            gradient.putpixel((x, y), blended_color)

    # Composite the gradient onto the original image
    image.paste(gradient, (0, 0), mask)

    return image

if __name__ == '__main__':
    # Specify the data for the QR code
    qr_data = "Gradient Rounded QR Code!"

    # Generate and save the gradient-colored rounded QR code
    generate_gradient_rounded_qr(qr_data)
    print("Gradient-colored rounded QR code generated and saved as gradient_rounded_qr.png.")
